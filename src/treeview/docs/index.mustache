<div class="intro">
<h1>YUI TreeView</h1>
<p>
<img src="{{componentAssets}}/treeview.png" alt="Screenshot of the TreeView widget" style="border: 1px solid #bfbfbf; float:right; height:161px; margin: 0 0 8px 8px; width:272px;">
<p>The TreeView widget provides a rich, 
<a href="http://www.w3.org/TR/wai-aria/roles#tree">ARIA-enhanced</a>
visual representation of hierarchical data.
Any given "TreeView" is actually a nested structure of YUI widgets
consisting of:</p>

<ul>
    <li>`TreeLeaf`, a `Widget` that mixes in the generic `WidgetChild` class. 
    A TreeLeaf has no children.</li>
    <li>`TreeView`, a `Widget` that mixes in the `WidgetParent` <em>and</em> `WidgetChild` classes.
    A `TreeView` may contain zero or more child `TreeLeaf` or `TreeView` objects.</li>
</ul>

<p>YUI 3 `TreeView` is built for high performance.
Its rendering mechanism uses 
<a href="../handlebars/">Y.Handlebars</a>,
which is fast enough to support even very large sets of DOM nodes. 
By default, `TreeView` loads all its nodes on demand, 
creating and rendering child nodes only when they're actually needed.</p> 

</div>

{{>getting-started}}

<h2>Using TreeView</h2>
<h3>Quick Start</h3>

<p>
To create a basic `TreeView` instance, 
first create a div to render the tree into,
with a class of `yui3-sam-skin`
(or alternatively, set `yui3-sam-skin` on 
the body or some other containing element):</p>

```
<div id="toc" class="yui3-skin-sam">
```

<p>Once you have a container div,
give the tree a label and some child leaves.
Then render it into the container:</p>

```
YUI().use('treeview', function (Y) {
    var tree = new Y.TreeView({
            label: 'My Novel',
            children: [
                { label: 'Chapter One' },
                { label: 'Chapter Two' }
            ]
        });
                
    tree.render('#toc');
});
```

<h3>Creating Subtrees</h3>

A `TreeView`'s `children` attribute 
provides some sugar for creating child nodes.
As shown in the <a href="#quick-start">Quick Start</a>,
if you add a simple object with just a label,
the `TreeView` creates a child `TreeLeaf` node.

However, if you also supply a `type` of `"TreeView"`, 
the `TreeView` creates a child `TreeView` node instead: 


```
var tree = new Y.TreeView({
    label : 'Main Tree',
    children: [
        { label: 'Leaf One' },
        { label: 'Leaf Two' },
        { type: 'TreeView', label: 'Subtree', children: [
            { label: 'Subtree - Leaf One' },
            { label: 'Subtree - Leaf Two' },
            { label: 'Subtree - Leaf Three' },
            { label: 'Subtree - Leaf Four' }
        ]}
    ]
});

tree.render('#demo');

```

It's worth reiterating that 
a YUI 3 `TreeView` mixes in the behaviors of both `WidgetParent` and `WidgetChild`,
and thus can serve as either a parent node, a child node, or both.
As a corollary, in a YUI 3 `TreeView` 
there is also nothing special about the top-level `TreeView` object. 
This is in contrast with YUI 2 `TreeView`, 
which had a master `TreeView` widget
that contained various `TreeNode` objects.


<h3>Responding to events</h3>

<p>Like other YUI widgets, `TreeView` offers a suite of custom events. For example, let's say you'd like to detect when a `TreeLeaf` has been clicked, all you'd need to do is:</p>

```
mytree.on('treeleaf:click', function (e) {
	Y.log('You clicked on: ' + e.target.get('label'));
});

```

<h3>Expanding/Collapsing a tree</h3>
<p>`TreeView` offers three methods to change the collapsed state of a tree: collapse, expand, toggleTreeState.</p>
```
//Collapses a tree
mytree.collapse();

//Expands a tree
mytree.expand();

//Toggles the state, if collapsed it will expand it and viceversa.
mytree.toggleTreeState();

```


<h3>Adding & Removing Tree nodes</h3>
<p>Adding and removing tree nodes is really simple. TreeView provides two methods to do so: `add()` and `remove()`.</p>

```
//adding a new treeleaf with a custom label
mytree.add({label: '<span class='new-node'>New leaf</span>'});

```
```
//remove first leaf
mytree.item(1).remove();

```

<h3>Configuring TreeView</h3>

<p>
Except for `label`, all configuration attributes are optional. This list only contains the most interesting attributes. For a complete list of all attributes, please refer to the <a href="{{apiDocs}}/TreeView.html">API docs</a>.
</p>

<h4>TreeView Attributes</h4>

<table>
  <thead>
    <tr>
      <th>Attribute</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`collapsed`</td>
      <td>`true`</td>
      <td>
        A boolean indicating whether the `TreeView` is collapsed.
        `true` if the tree's children are currently hidden,
        `false` if they are currently expanded.
        To change the tree's expansion state, 
        call `expand()` or `collapse()`.   
      </td>
    </tr>
    <tr>
      <td>`label`</td>
      <td>Empty string</td>
      <td>
          [<b>Required</b>] A String snippet of text or HTML 
          to display at the top level of the tree. 
          Individual `TreeLeaf` objects have their own `label` attribute.
      </td>
    </tr>
    <tr>
      <td>`lazyLoad`</td>
      <td>`true`</td>
      <td>
          Specifies whether the tree should generate DOM nodes 
          for its hidden child leaves on demand, 
          when the user expands that branch of the tree.
          Setting `lazyLoad` to `false` causes the `TreeView` to
          generate child DOM nodes ahead of time, 
          which will likely decrease perceived performance for large trees.
          You can only change `lazyLoad` when you first instantiate the tree.</p>
      </td>
    </tr>
    <tr>
      <td>`children`</td>
      <td>Empty array</td>
      <td>An array of child `TreeView` or `TreeLeaf` objects.</td>
    </tr>
  </tbody>
</table>

<p>For the full list of attributes `TreeView` inherits from `WidgetParent` and `WidgetChild`, 
refer to the <a href="{{apiDocs}}/WidgetParent.html">WidgetParent</a>
and <a href="{{apiDocs}}/WidgetChild.html">WidgetChild API documentation</a>.</p>

<h4>TreeLeaf Attributes</h4>

<table>
  <thead>
    <tr>
      <th>Attribute</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`label`</td>
      <td>Empty string</td>
      <td>
          [<b>Required</b>] A String that provides a snippet of text or HTML
          to display for the leaf.
      </td>
    </tr>
    <tr>
      <td>`parent`</td>
       <td>null</td>
       <td>
            A reference to the `TreeLeaf`'s parent `TreeView` object.
       </td>
    </tr>
    <tr>
      <td>`depth`</td>
      <td>0</td>
      <td>
          A Number indicating the depth of this leaf 
          relative to the root of the tree hierarchy.
          You cannot change this attribute directly, 
          but this attribute will correctly reflect the depth
          if you use `add()` and `remove()` to mutate the 
          tree's structure. 
      </td>
    </tr>
    <tr>
      <td>`root`</td>
      <td>null</td>
      <td>
      	    A reference to the root `TreeView` object.
      </td>
    </tr>
  </tbody>
</table>

<p>For the full list of attributes `TreeLeaf` inherits from `WidgetChild`, 
refer to the <a href="{{apiDocs}}/WidgetChild.html">WidgetChild API documentation</a>.</p>

